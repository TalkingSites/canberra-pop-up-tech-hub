name: Notify Telegram on GitHub Events

on:
  pull_request:
    types: [opened, closed, reopened, review_requested, review_request_removed]
  pull_request_review:
    types: [submitted, edited, dismissed]
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]
  push:
    branches: [main]
  release:
    types: [published]
  watch:
    types: [started]
  fork:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Message
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_THREAD_ID: ${{ secrets.TELEGRAM_THREAD_ID }}
          EVENT_NAME: ${{ github.event_name }}
          ACTION: ${{ github.event.action }}
          ACTOR: ${{ github.actor }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          REVIEW_STATE: ${{ github.event.review.state }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
          PUSH_REF: ${{ github.ref }}
          RELEASE_NAME: ${{ github.event.release.name }}
          RELEASE_URL: ${{ github.event.release.html_url }}
        run: |
          echo "üîî GitHub Event: $EVENT_NAME - $ACTION"

          if [ "$EVENT_NAME" = "pull_request" ]; then
            if [ "$ACTION" = "opened" ]; then
              TEXT="üÜï **Pull Request opened:** *$PR_TITLE*%0Aby $PR_AUTHOR%0A[View on GitHub]($PR_URL)"
            elif [ "$ACTION" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              TEXT="‚úÖ **Pull Request merged:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$ACTION" = "closed" ]; then
              TEXT="‚ùå **Pull Request closed:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$ACTION" = "reopened" ]; then
              TEXT="‚ôªÔ∏è **Pull Request reopened:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$ACTION" = "review_requested" ]; then
              TEXT="üëÄ **Review requested:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$ACTION" = "review_request_removed" ]; then
              TEXT="üö´ **Review request removed:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            fi

          elif [ "$EVENT_NAME" = "pull_request_review" ]; then
            if [ "$REVIEW_STATE" = "approved" ]; then
              TEXT="üëç **Review approved:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$REVIEW_STATE" = "changes_requested" ]; then
              TEXT="üîÑ **Changes requested:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            elif [ "$REVIEW_STATE" = "commented" ]; then
              TEXT="üí¨ **Review comment:** *$PR_TITLE*%0Aby $ACTOR%0A[View on GitHub]($PR_URL)"
            fi

          elif [ "$EVENT_NAME" = "issues" ]; then
            if [ "$ACTION" = "opened" ]; then
              TEXT="üìù **Issue opened:** *$ISSUE_TITLE*%0Aby $ISSUE_AUTHOR%0A[View on GitHub]($ISSUE_URL)"
            elif [ "$ACTION" = "closed" ]; then
              TEXT="‚úÖ **Issue closed:** *$ISSUE_TITLE*%0Aby $ACTOR%0A[View on GitHub]($ISSUE_URL)"
            elif [ "$ACTION" = "reopened" ]; then
              TEXT="‚ôªÔ∏è **Issue reopened:** *$ISSUE_TITLE*%0Aby $ACTOR%0A[View on GitHub]($ISSUE_URL)"
            fi

          elif [ "$EVENT_NAME" = "issue_comment" ]; then
            SHORT_BODY=$(echo "$COMMENT_BODY" | head -c 150)
            TEXT="üí¨ **New comment on issue:** *$ISSUE_TITLE*%0Aby $COMMENT_AUTHOR%0A${SHORT_BODY}%0A[View on GitHub]($COMMENT_URL)"

          elif [ "$EVENT_NAME" = "push" ]; then
            BRANCH=$(echo "$PUSH_REF" | sed 's|refs/heads/||')
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            COMMIT_URL="${{ github.event.head_commit.url }}"
            TEXT="**New commit:** \"$COMMIT_MSG\"%0A$ACTOR pushed to *$BRANCH*%0A[View on GitHub]($COMMIT_URL)"

          elif [ "$EVENT_NAME" = "release" ]; then
            TEXT="üè∑Ô∏è **New release:** *$RELEASE_NAME*%0Aby $ACTOR%0A[View on GitHub]($RELEASE_URL)"

          elif [ "$EVENT_NAME" = "watch" ]; then
            TEXT="‚≠ê **Repository starred**%0Aby $ACTOR"

          elif [ "$EVENT_NAME" = "fork" ]; then
            TEXT="üç¥ **Repository forked**%0Aby $ACTOR"

          else
            echo "‚ö†Ô∏è Unsupported event: $EVENT_NAME"
            exit 0
          fi

          THREAD_ARG="-d message_thread_id=$TELEGRAM_THREAD_ID"

          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            $THREAD_ARG \
            -d disable_web_page_preview=true \
            -d text="$TEXT" \
            -d parse_mode=Markdown)

          echo "üì® Telegram API Response: $RESPONSE"
